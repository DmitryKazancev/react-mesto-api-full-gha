{"ast":null,"code":"var _s = $RefreshSig$();\nimport { useState } from \"react\";\nexport default function useFormValidator() {\n  _s();\n  const [inputValues, setInputValues] = useState({});\n  const [inputErrors, setInputErrors] = useState({});\n  const [isValid, setIsValid] = useState(false);\n  const [isInputValid, setIsInputValid] = useState({});\n  function handleCheck(evt) {\n    const name = evt.target.name;\n    const value = evt.target.value;\n    const validationMessage = evt.target.validationMessage;\n    const valid = evt.target.validity.valid;\n    const form = evt.target.form;\n    console.log(isInputValid);\n    setInputValues(lastValues => {\n      return {\n        ...lastValues,\n        [name]: value\n      };\n    });\n    setInputErrors(lastErrors => {\n      return {\n        ...lastErrors,\n        [name]: validationMessage\n      };\n    });\n    setIsValid(lastIsInputValid => {\n      return {\n        ...lastIsInputValid,\n        [name]: valid\n      };\n    });\n  }\n  return {\n    handleCheck\n  };\n}\n_s(useFormValidator, \"PNx/D1KjpGV4iWFZhUWRkt/etZI=\");","map":{"version":3,"names":["useState","useFormValidator","_s","inputValues","setInputValues","inputErrors","setInputErrors","isValid","setIsValid","isInputValid","setIsInputValid","handleCheck","evt","name","target","value","validationMessage","valid","validity","form","console","log","lastValues","lastErrors","lastIsInputValid"],"sources":["/Users/dk/dev/mesto-react/src/utils/useFormValidator.js"],"sourcesContent":["import { useState } from \"react\";\n\n\nexport default function useFormValidator() {\n    const [inputValues, setInputValues] = useState({});\n    const [inputErrors, setInputErrors] = useState({});\n    const [isValid, setIsValid] = useState(false);\n    const [isInputValid, setIsInputValid] = useState({});\n\n    function handleCheck (evt) {\n        const name = evt.target.name;\n        const value = evt.target.value;\n        const validationMessage = evt.target.validationMessage;\n        const valid = evt.target.validity.valid;\n        const form = evt.target.form;\n        console.log(isInputValid)\n\n        setInputValues((lastValues) => {\n            return {...lastValues, [name]: value}\n        })\n\n        setInputErrors((lastErrors) => {\n            return {...lastErrors, [name]: validationMessage}\n        })\n\n        setIsValid((lastIsInputValid) => {\n            return {...lastIsInputValid, [name]: valid}\n        })\n\n        \n\n\n    \n\n    }\n    return {handleCheck}\n}"],"mappings":";AAAA,SAASA,QAAQ,QAAQ,OAAO;AAGhC,eAAe,SAASC,gBAAgBA,CAAA,EAAG;EAAAC,EAAA;EACvC,MAAM,CAACC,WAAW,EAAEC,cAAc,CAAC,GAAGJ,QAAQ,CAAC,CAAC,CAAC,CAAC;EAClD,MAAM,CAACK,WAAW,EAAEC,cAAc,CAAC,GAAGN,QAAQ,CAAC,CAAC,CAAC,CAAC;EAClD,MAAM,CAACO,OAAO,EAAEC,UAAU,CAAC,GAAGR,QAAQ,CAAC,KAAK,CAAC;EAC7C,MAAM,CAACS,YAAY,EAAEC,eAAe,CAAC,GAAGV,QAAQ,CAAC,CAAC,CAAC,CAAC;EAEpD,SAASW,WAAWA,CAAEC,GAAG,EAAE;IACvB,MAAMC,IAAI,GAAGD,GAAG,CAACE,MAAM,CAACD,IAAI;IAC5B,MAAME,KAAK,GAAGH,GAAG,CAACE,MAAM,CAACC,KAAK;IAC9B,MAAMC,iBAAiB,GAAGJ,GAAG,CAACE,MAAM,CAACE,iBAAiB;IACtD,MAAMC,KAAK,GAAGL,GAAG,CAACE,MAAM,CAACI,QAAQ,CAACD,KAAK;IACvC,MAAME,IAAI,GAAGP,GAAG,CAACE,MAAM,CAACK,IAAI;IAC5BC,OAAO,CAACC,GAAG,CAACZ,YAAY,CAAC;IAEzBL,cAAc,CAAEkB,UAAU,IAAK;MAC3B,OAAO;QAAC,GAAGA,UAAU;QAAE,CAACT,IAAI,GAAGE;MAAK,CAAC;IACzC,CAAC,CAAC;IAEFT,cAAc,CAAEiB,UAAU,IAAK;MAC3B,OAAO;QAAC,GAAGA,UAAU;QAAE,CAACV,IAAI,GAAGG;MAAiB,CAAC;IACrD,CAAC,CAAC;IAEFR,UAAU,CAAEgB,gBAAgB,IAAK;MAC7B,OAAO;QAAC,GAAGA,gBAAgB;QAAE,CAACX,IAAI,GAAGI;MAAK,CAAC;IAC/C,CAAC,CAAC;EAON;EACA,OAAO;IAACN;EAAW,CAAC;AACxB;AAACT,EAAA,CAjCuBD,gBAAgB"},"metadata":{},"sourceType":"module","externalDependencies":[]}